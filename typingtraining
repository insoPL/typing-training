#!/usr/bin/env python3

import argparse

import curses
from lib.library import Library
from lib.textobject import TextObject
from lib.tracker import Tracker


def blocking_exit(stdscr):
    stdscr.addstr('To proceed press "BACKSPACE" key...', curses.color_pair(3))
    stdscr.refresh()
    while True:
        print(stdscr.getkey())


def main(content, repeats):
    def main_inner(stdscr):
        if curses.has_colors():
            # height, width = stdscr.getmaxyx()
            lib = Library()
            # lib.createdefault()
            tracker = Tracker(content(lib))
            repeats_counter = repeats
            while repeats_counter != 0:
                tracker.start_tracking(stdscr)
                tracker.textobj = content(lib)
                repeats_counter -= 1
            tracker.summarize(stdscr)
            blocking_exit(stdscr)
        else:
            stdscr.addstr('This terminal does not support colors')
            stdscr.refresh()
            stdscr.getkey()
    return main_inner


if __name__ == '__main__':
    parser = argparse.ArgumentParser()

    parser.add_argument(
        'text_id',
        help="Print text under given id: can be negative: -1 for the last one",
        type=int,
        nargs='?'
    )

    parser.add_argument(
        '-d',
        '--difficulty',
        help="Specify difficulty: example -d 1 2",
        type=int,
        nargs='+',
        choices={0, 1, 2},
        default=[0, 1, 2]
    )
    # parser.add_argument(
    #     '--id',
    #     help="Print text under given id: can be negative: example (for last one) --id -1 ",
    #     type=int
    # )
    parser.add_argument(
        '--random-chars',
        '-r',
        action="store_true",
        help="Print random characters depending on difficulty"
    )
    parser.add_argument(
        '--print-db',
        action="store_true",
        help="Show all available texts with their id and exit"
    )
    parser.add_argument(
        '--non-stop-mode',
        '-n',
        help="Repeats training defined amount of times, leave argument empty for inifnite mode",
        type=int,
        nargs='?',
        default=1
    )

    args = parser.parse_args()

    if args.print_db:
        print(Library().get_all())
        import sys
        sys.exit(0)

    if args.difficulty is not None:
        args.difficulty = set(args.difficulty)

    # Handle text under given id
    # if args.id is not None or args.text_id is not None:
    if args.text_id is not None:
        f = lambda lib: lib.get_text_by_id(args.text_id)
    elif args.random_chars:
        f = lambda lib: lib.get_random_chars(difficulties=args.difficulty)
    else:  # default
        f = lambda lib: lib.getrandom(difficulties=args.difficulty)

    if args.non_stop_mode is None:
        args.non_stop_mode = -1

    # start
    try:
        curses.wrapper(main(
            lambda lib: TextObject(f(lib)),
            args.non_stop_mode
        ))
        print('GG WP!')
    except KeyboardInterrupt:  # exit the game
        pass
    finally:
        # print('GG WP!')
        pass
